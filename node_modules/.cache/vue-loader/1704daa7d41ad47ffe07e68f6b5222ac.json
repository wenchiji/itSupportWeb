{"remainingRequest":"D:\\develop\\ideaProjects\\itSupportWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\develop\\ideaProjects\\itSupportWeb\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\develop\\ideaProjects\\itSupportWeb\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\develop\\ideaProjects\\itSupportWeb\\src\\views\\Record.vue?vue&type=template&id=4917ee8b&","dependencies":[{"path":"D:\\develop\\ideaProjects\\itSupportWeb\\src\\views\\Record.vue","mtime":1617176173940},{"path":"D:\\develop\\ideaProjects\\itSupportWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\develop\\ideaProjects\\itSupportWeb\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\develop\\ideaProjects\\itSupportWeb\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\develop\\ideaProjects\\itSupportWeb\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}